{
  "lm_user": {
    "getList": "SELECT id, login, first_name, last_name, auth_type_id, ext_user_id, photo_url, is_blocked, phone_mobile, email, region_id FROM lm_user WHERE status = 'A' ORDER BY id ",
    "getById": "SELECT lm_user.id, ur.role_id, login, first_name, last_name, auth_type_id, ext_user_id, photo_url, is_blocked, phone_mobile, email, region_id FROM lm_user inner join lm_user_role ur on lm_user.id = ur.user_id and ur.status = 'A' WHERE lm_user.status = 'A' AND lm_user.id = ? ",
    "getUsersByRoleId": "SELECT u.id, ur.role_id, u.ext_user_id, u.login, u.first_name, u.last_name, u.auth_type_id, u.photo_url, is_blocked, phone_mobile, email, region_id FROM lm_user u inner join lm_user_role ur on u.id = ur.user_id and ur.status = 'A' WHERE ur.role_id = ?;",
    "getByExtId": "SELECT lm_user.id, ur.role_id, login, first_name, last_name, auth_type_id, ext_user_id, photo_url, is_blocked, phone_mobile, email, region_id FROM lm_user inner join lm_user_role ur on lm_user.id = ur.user_id and ur.status = 'A' WHERE lm_user.status = 'A' AND ext_user_id = ? and auth_type_id = ? ",
    "getUserByExtIdAndUpdate": "select * from user_get_and_update(?, ?)",
    "save": "INSERT INTO lm_user (login, first_name, last_name, ext_user_id, auth_type_id, photo_url, last_logged_in) select :login, :first_name, :last_name, :ext_user_id, :auth_type_id, :photo_url, now() WHERE not exists (select * from lm_user where ext_user_id = :ext_user_id); ",
    "update": "UPDATE lm_user SET phone_mobile = :phone_mobile, mod_date= now() WHERE id = :id;",
    "updateMobileNumber": "UPDATE lm_user SET phone_mobile = ?, mod_date= now() WHERE ext_user_id = ? and auth_type_id = ? AND status = 'A';",
    "blockUser": "UPDATE lm_user SET block_date = now(), perform_blocking_user_id = ?, is_blocked = true WHERE id = ? and is_blocked = false; ",
    "updateProfile": "UPDATE lm_user SET mod_date = now(), first_name = ?, last_name = ?, email = ? WHERE id = ? ",
    "updateUserData": "UPDATE lm_user SET login = ?, photo_url = ?, mod_date= now() WHERE ext_user_id = ? and auth_type_id = ?; ",
    "updateUserRegion": "UPDATE lm_user SET region_id = ?, mod_date= now() WHERE id = ? and auth_type_id = ?; ",
    "queryFilter": " SELECT u.id, u.ext_user_id, ur.role_id, r.name  role_name, u.login, u.first_name, u.last_name, u.middle_name, u.phone_mobile, u.email, (select le.start_date from lm_event le where le.user_id = u.id order by start_date desc limit 1)  as last_event_start_date, u.photo_id, u.region_id, reg.name_en region_name, u.last_logged_in, u.is_blocked, u.block_date, u.perform_blocking_user_id, (select (du.first_name || ' ' || du.last_name) from lm_user du where du.id = u.perform_blocking_user_id) as perform_blocking_user_full_name, u.auth_type_id, u.status, u.reg_date FROM lm_user u left join lm_user_role ur on u.id = ur.user_id and ur.status = 'A' left join lm_role r on ur.role_id = r.id and r.status = 'A' left join lm_region reg on u.region_id = reg.id and reg.status = 'A' WHERE (ur.role_id = :role_id or :role_id = 0) AND (u.region_id = :region_id or  :region_id = 0) AND (u.status = :status or :status = '0') AND (u.reg_date >= CAST(:reg_date_start AS timestamp) and u.reg_date <= CAST(:reg_date_end AS timestamp) or CAST('1970-01-01' AS timestamp) = :reg_date_start or CAST(:reg_date_end AS timestamp) = '1970-01-01') AND (UPPER(CAST(u.id AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.first_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.last_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.middle_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.login AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.email AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.phone_mobile AS text)) LIKE UPPER(:text_search)) $order by$ LIMIT :perpage OFFSET :page; ",
    "queryCountFilter": " SELECT count(*) FROM lm_user u left join lm_user_role ur on u.id = ur.user_id and ur.status = 'A' left join lm_role r on ur.role_id = r.id and r.status = 'A' left join lm_region reg on u.region_id = reg.id and reg.status = 'A' WHERE (ur.role_id = :role_id or :role_id = 0) AND (u.region_id = :region_id or  :region_id = 0) AND (u.status = :status or :status = '0') AND (u.reg_date >= CAST(:reg_date_start AS timestamp) and u.reg_date <= CAST(:reg_date_end AS timestamp) or CAST('1970-01-01' AS timestamp) = :reg_date_start or CAST(:reg_date_end AS timestamp) = '1970-01-01') AND (UPPER(CAST(u.id AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.first_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.last_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.middle_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.login AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.email AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.phone_mobile AS text)) LIKE UPPER(:text_search)); "
  },
  "lm_user_role": {
    "updateUserRole": "UPDATE lm_user_role SET role_id = ?, mod_date= now() WHERE user_id = ? AND status = 'A' "
  },
  "lm_permission": {
    "getList": " SELECT id, name, description, reg_date FROM lm_permission p WHERE status = 'A' and is_active = true ORDER BY id ",
    "getListWithRp": " SELECT id, name, description, reg_date FROM lm_permission p WHERE status = 'A' and is_active = true ORDER BY id "
  },
  "lm_role_permission": {
    "getRolePermissionsByUserId": "select rp.id rp_id, p.id p_id, rp.role_id role_id, p.name, rp.access_value, p.is_active from lm_role_permission rp join lm_permission p on p.id = rp.permission_id and p.status = 'A' join lm_user_role ur on ur.user_id = ? and ur.status = 'A' join lm_user u on u.id = ur.user_id and ur.status = 'A' where rp.role_id = ur.role_id and rp.status = 'A' and u.is_blocked = false and p.is_active = true ",
    "getList": " SELECT rp.id id, role_id, permission_id, access_value, rp.reg_date FROM lm_role_permission rp inner join lm_permission p on p.id = rp.permission_id and p.status = 'A' WHERE rp.status = 'A'  and p.is_active = true ORDER BY permission_id, role_id ",
    "updateAccessValue": " UPDATE lm_role_permission SET access_value = ?, mod_date= now() WHERE id = ?; "
  },
  "lm_event_category": {
    "getList": "SELECT id, name, description, help_type_id, is_active, is_visible, duration_min FROM lm_event_category WHERE status = 'A' ORDER BY id ",
    "getListByPerPage": "SELECT id, name, description, help_type_id, is_visible FROM lm_event_category WHERE status = 'A' ORDER BY name LIMIT ? OFFSET ?",
    "getCount": "SELECT COUNT(*) FROM lm_event_category WHERE status = 'A'",
    "getById": "SELECT id, name, description, help_type_id, is_visible FROM lm_event_category WHERE status = 'A' AND id = ?",
    "queryFilter": "SELECT * FROM (SELECT id, name, description FROM lm_event_category ec WHERE status = 'A' AND is_active = true AND (UPPER(CAST(ec.name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(description AS text)) LIKE UPPER(:text_search))) as foo $order by$ LIMIT :perpage OFFSET :page; ",
    "queryCountFilter": "SELECT COUNT(*) FROM (SELECT * FROM lm_event_category ec WHERE status = 'A' AND is_active = true AND (UPPER(CAST(ec.name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(description AS text)) LIKE UPPER(:text_search))) as foo; ",
    "getActiveEventCategories": "SELECT id, name, description, help_type_id, is_active, is_visible, duration_min FROM lm_event_category WHERE status = 'A' and is_active = true ORDER BY id ",
    "updateIsActive": "UPDATE lm_event_category SET is_active = ?, mod_date= now() WHERE id = ? and status = 'A'; ",
    "updateDurationMin": "UPDATE lm_event_category SET duration_min = ?, mod_date= now() WHERE id = ? and status = 'A'; "
  },
  "lm_event": {
    "getEventsForAnonymousRelevant": "SELECT lm_event.id, user_id, u.ext_user_id user_ext_user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active, is_moderated, show_name_for_anonym, show_description_for_anonym, u.first_name user_first_name, u.last_name user_last_name, lm_event.reg_date, 1 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (category_id = ? or ? = 0) and (now() >= start_date and now() <= end_date) and is_moderated = true ORDER BY id DESC ",
    "getEventsForAnonymousAll": "SELECT lm_event.id, user_id, u.ext_user_id user_ext_user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active, is_moderated, show_name_for_anonym, show_description_for_anonym, u.first_name user_first_name, u.last_name user_last_name, lm_event.reg_date, 2 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (category_id = ? or ? = 0) and is_moderated = true and ((end_date >= ? and end_date <= ?) or (start_date >= ? and end_date <= ?) or (start_date >= ? and start_date <= ?) or (start_date < ? and end_date >= ?)) ORDER BY id DESC ",
    "getRelevantEvents": " SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 1 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (user_id = ? or ? = 0) and (category_id = ? or ? = 0) and (start_date <= now() and end_date >= now()) and (is_moderated = true) ORDER BY id DESC ",
    "getAllEvents": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 2 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (user_id = ? or ? = 0) and (category_id = ? or ? = 0) and ((end_date >= ? and end_date <= ?) or (start_date >= ? and end_date <= ?) or (start_date >= ? and start_date <= ?) or (start_date < ? and end_date >= ?)) ORDER BY id DESC ",
    "getAllEventsWithModerated": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 2 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (user_id = ? or ? = 0) and (category_id = ? or ? = 0) and is_moderated = true and ((end_date >= ? and end_date <= ?) or (start_date >= ? and end_date <= ?) or (start_date >= ? and start_date <= ?) or (start_date < ? and end_date >= ?)) ORDER BY id DESC ",
    "getOwnEvents": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 3 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (user_id = ? ) and (category_id = ? or ? = 0) ORDER BY id DESC ",
    "getModeratingEvents": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 4 as calc_status, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' and (user_id = ? or ? = 0) and (category_id = ? or ? = 0)  and (is_moderated is null) and ((end_date >= ? and end_date <= ?) or (start_date >= ? and end_date <= ?) or (start_date >= ? and start_date <= ?) or (start_date < ? and end_date >= ?)) and ((? = lm_event.region_id) or (? = 1 or lm_event.region_id = 1)) ORDER BY id DESC ",
    "getEventsBySearchText": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active, is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name  user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 2 as calc_status, lm_event.region_id from lm_event   join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' AND (user_id = ? or ? = 0) AND CAST(lm_event.id AS text) LIKE ?::text or UPPER(CAST(lm_event.name AS text)) LIKE UPPER(?::text)::text   or UPPER(CAST(lm_event.description AS text)) LIKE UPPER(?::text)::text ORDER BY id DESC ",
    "getEventsBySearchTextForAnonymous": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active, is_moderated, show_name_for_anonym, show_description_for_anonym, u.login user_login, u.first_name  user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.reg_date, 2 as calc_status, lm_event.region_id from lm_event   join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' AND (user_id = ? or ? = 0) AND CAST(lm_event.id AS text) LIKE ?::text or UPPER(CAST(lm_event.name AS text)) LIKE UPPER(?::text)::text   or UPPER(CAST(lm_event.description AS text)) LIKE UPPER(?::text)::text and is_moderated = true ORDER BY id DESC ",
    "getList": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, lm_event.region_id from lm_event join lm_user u on lm_event.user_id = u.id and u.status = 'A' WHERE lm_event.status = 'A' ORDER BY id ",
    "getListByPerPage": "SELECT lm_event.id, user_id, category_id, name, address, start_date, end_date, description, geometry_type, geojson, country_code, (now() >= start_date and now() <= end_date) is_active,  is_moderated, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id from lm_event FROM lm_event_category WHERE status = 'A' ORDER BY name LIMIT ? OFFSET ?",
    "getCount": "SELECT COUNT(*) FROM lm_event WHERE status = 'A'",
    "getById": "SELECT e.id, e.user_id, e.category_id, e.name, e.address, e.start_date, e.end_date, e.description, e.geometry_type, e.geojson, e.country_code, (now() >= start_date and now() <= end_date) is_active,  e.is_moderated, e.reg_date, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, e.region_id FROM lm_event e join lm_user u on e.user_id = u.id and u.status = 'A' WHERE e.status = 'A' AND e.id = ? ",
    "queryFilter": " SELECT event.id, event.user_id, event.category_id, ur.role_id, r.name role_name, event.name, event.address, event.start_date, event.end_date, event.description, event.country_code, (now() >= event.start_date and now() <= event.end_date) is_active, event.is_moderated, event.perform_deletion_user_id, event.region_id, rg.name_en region_name, (event.bot_event_id is not null) is_from_bot, event.status, event.reg_date, u.login  user_login, u.first_name user_first_name, u.last_name user_last_name, CASE WHEN u.last_name IS NOT NULL THEN u.first_name || ' ' || u.last_name WHEN u.last_name IS NULL THEN u.first_name END user_full_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id, (select count(id) from lm_event_response er where er.event_id = event.id and er.status = 'A') as responses_count from lm_event event join lm_user u on event.user_id = u.id and u.status = 'A' left join lm_user_role ur on u.id = ur.user_id and ur.status = 'A' left join lm_role r on ur.role_id = r.id and r.status = 'A'  left join lm_region rg on rg.id = event.region_id and rg.status = 'A' WHERE (event.user_id = :user_id or :user_id = 0) and (event.category_id = :category_id or :category_id = 0) AND (event.region_id = :region_id or :region_id = 0) AND (event.status = :status or :status = '0')  AND (event.reg_date >= CAST(:reg_date_start AS timestamp) and event.reg_date <= CAST(:reg_date_end AS timestamp) or CAST('1970-01-01' AS timestamp) = :reg_date_start or CAST(:reg_date_end AS timestamp) = '1970-01-01')  AND (UPPER(CAST(event.id AS text)) LIKE UPPER(:text_search) or UPPER(CAST(event.name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(event.description AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.first_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.last_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.middle_name AS text)) LIKE UPPER(:text_search)) $order by$ LIMIT :perpage OFFSET :page; ",
    "queryCountFilter": " SELECT count(event.id) from lm_event event join lm_user u on event.user_id = u.id and u.status = 'A' left join lm_user_role ur on u.id = ur.user_id and ur.status = 'A' left join lm_role r on ur.role_id = r.id and r.status = 'A' WHERE (event.user_id = :user_id or :user_id = 0) and (event.category_id = :category_id or :category_id = 0) AND (event.region_id = :region_id or :region_id = 0) AND (event.status = :status or :status = '0')  AND (event.reg_date >= CAST(:reg_date_start AS timestamp) and event.reg_date <= CAST(:reg_date_end AS timestamp) or CAST('1970-01-01' AS timestamp) = :reg_date_start or CAST(:reg_date_end AS timestamp) = '1970-01-01')  AND (UPPER(CAST(event.id AS text)) LIKE UPPER(:text_search) or UPPER(CAST(event.name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(event.description AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.first_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.last_name AS text)) LIKE UPPER(:text_search) or UPPER(CAST(u.middle_name AS text)) LIKE UPPER(:text_search)) ",
    "save": "INSERT INTO lm_event(user_id, category_id, name, description, address, geojson, start_date, end_date, country_code, show_name_for_anonym, show_description_for_anonym, region_id) VALUES (:user_id, :category_id, :name, :description, :address, CAST(:geojson AS json), CAST(:start_date AS timestamptz), CAST(:end_date AS timestamptz), :country_code, :show_name_for_anonym, :show_description_for_anonym, :region_id);",
    "update": "UPDATE lm_event SET category_id=:category_id, name= :name, description= :description, address= :address, geojson= CAST(:geojson AS json), start_date=:start_date, end_date=:end_date, country_code=:country_code, is_moderated = :is_moderated, mod_date= now(), show_name_for_anonym = :show_name_for_anonym, show_description_for_anonym = :show_description_for_anonym, action_user_id = :action_user_id, region_id = :region_id WHERE id = :id;",
    "deleteEvent": "UPDATE lm_event SET exp_date = now(), perform_deletion_user_id = ?, status = 'D' WHERE id = ? and status = 'A'; ",
    "getRegionByCoordinates": " select * from get_region_by_location(?, ?) as region_id;",
    "getDashboardDataEvents": " select * from get_dashboard_data_events(?, ?, ?, ?, ?) ;",
    "getDashboardDataUsers": "  select * from get_dashboard_data_users() ;",
    "getDashboardDataEventsByRegionFilter": " select * from get_dashboard_data_events_by_region_filter(?, ?) ;",
    "getDashboardDataEventsByCategoryRegion": " select * from get_dashboard_data_events_by_category_region(?, ?);",
    "getDashboardDataEventsByCategoryFilter": " select * from get_dashboard_data_events_by_category_filter(?, ?);",
    "saveEventAction": " insert into lm_event_action (event_id, user_id, action_type_id) values (?, ?, ?);",
    "updateModerationStatus": "UPDATE lm_event SET mod_date = now(), is_moderated = ? WHERE id = ? and status = 'A'; "
  },
  "lm_event_response": {
    "saveEventResponse": "INSERT INTO lm_event_response(event_id, responsed_user_id, name, message, start_date) VALUES (?, ?, ?, ?, ?);"
  },
  "lm_exported_event": {
    "getById": "SELECT e.id, e.user_id, e.category_id, e.name, e.address, e.start_date, e.end_date, e.description, e.geometry_type, e.geojson, e.country_code, (now() >= start_date and now() <= end_date) is_active, e.is_moderated, e.reg_date, exp_e.responded_first_name, exp_e.responded_phone_number, exp_e.responded_date, u.login user_login, u.first_name user_first_name, u.last_name user_last_name, u.email user_email, u.photo_url user_photo_url, u.phone_mobile user_phone_mobile, u.ext_user_id user_ext_user_id FROM lm_event e join lm_user u on e.user_id = u.id and u.status = 'A' join lm_exported_event exp_e on e.id = exp_e.event_id and exp_e.status = 'A' WHERE e.status = 'A' AND e.id = ? ",
    "saveEventResponse": "INSERT INTO lm_event_response(event_id, responsed_user_id, name, message, start_date) VALUES (?, ?, ?, ?, ?);",
    "save": " INSERT INTO lm_exported_event (event_id, external_id) select :event_id, :external_event_id ; ",
    "update": " update lm_exported_event set responded_user_id = ?, responded_first_name = ?, responded_phone_number = ?, is_responded= true, responded_date = now(), mod_date = now() where external_id = ? returning event_id; "
  },
  "lm_region": {
    "getListByLang": " select id, country_id, code, case when ? = 'en' then name_en when ? = 'ru' then name_ru when ? = 'uz' then name_uz end as name, name_alternative_1, description from lm_region where status = 'A' order by id;"
  }
}
